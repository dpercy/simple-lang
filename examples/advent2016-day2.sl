
(def empty list.empty)
(def cons list.cons)
(def = int.=)
(def - int.-)
(def + int.+)

(def (list3 a b c)
  (cons a (cons b (cons c (empty)))))
  
(def (list5 a b c d e)
  (cons a (cons b (list3 c d e))))

(def keypad-version-one
  (list3
   (list3 1 2 3)
   (list3 4 5 6)
   (list3 7 8 9)))

(def keypad-version-two
  (list5
   (list5 #f #f  1 #f #f)
   (list5 #f  2  3  4 #f)
   (list5  5  6  7  8  9)
   (list5 #f "A" "B" "C" #f)
   (list5 #f #f "D" #f #f)))
   
;(def keypad keypad-version-one)
(def keypad keypad-version-two)


; "If a move doesn't lead to a button, ignore it".


(struct (Posn x y))

(def (deref p)
  (match p
    [(Posn x y)
     (list-ref (list-ref keypad 
                         y
                         (empty))
               x
               #false)]))
(def (list-ref lst n default)
  (match lst
    [(empty) default]
    [(cons x xs) (match (= n 0)
      [#true x]
      [#false (list-ref xs (- n 1) default)])]))

(deref (Posn 0 2))


(def (would-move p c)
  (add p (match c
    ["U" (Posn 0 -1)]
    ["D" (Posn 0 +1)]
    ["L" (Posn -1 0)]
    ["R" (Posn +1 0)])))
(def (add v w)
  (match v [(Posn v1 v2) 
  (match w [(Posn w1 w2)
  (Posn (+ v1 w1) (+ v2 w2))])]))
  
(def (move p c)
  (match (would-move p c)
    [pp (match (deref pp)
      [#false p]
      [n pp])]))

(move (Posn 0 0) "U")

(def input
  (cons "LUULRUULULLUDUDULDLUDDDLRURUDLRRDRDULRDDULLLRULLLURDDLRDLUUDDRURDDRDDDDRDULULLLLURDDLLRLUUDDDRLRRRDURLDDLRRLDUDRRRDLDLRRDLDLUURRLRULLULRUDRDLRUURLDRDLRLDULLLUDRDDRLURLUUDRLLLDRUUULLUULRUDDUDRDUURRRUDRLDDUURDUURUDRDDLULDDUDUDRRDDULUDULRDRULRLRLURURDULRUULLRDDDDRRUUDDDUUDRLLRUDRLRDLRRLULRLULRUDDULRLLLURLDDRLDDLRRLDRDDDRRLRUDRULUUDUURLDLRRULUDRDULDLLRRURRDDLRRRLULUDUUDDUDDLRDLRDRLRLDUDUDDUDLURRUURDRLRURLURRRLRLRRUDDUDDLUDRLUURUUDUUDDULRRLUUUDRLRLLUR"
  (cons "LDLLRRLDULDDRDDLULRRRDDUDUDRRLLRUUULRUDLLRRDDRRLDDURUUDLUDRRLDURDDRUDLUDUUDLDLLLDLLLDRLLDLRUULULLUUDULDUUULDDLRUDLLUDLUUULDRLUDRULUUDLDURDLDUULLRDUDRDLURULDLUUUDURLDDRLLDRLRDDDUDRUULLDLUDRRDDLDLUURUDDLDRURRLULUDDURLDRDRDUDDRRULRLDURULULRURDUURRUDRDDRDRLDRDUUDLRULRDDDULRURUDRUUULUUDDLRRDDDUDRLRUDRDLRRUDLUDRULDDUDLRLDDLDRLRDLULRDRULRLLRLUDUURULLLDDUULUUDDDUDRRULDDDULRUDRRLRLLLUDLULDUUULDDULDUUDLUULRDLDUDRUDLLDLDLLULDDDDLUDDUDRUDLRRRDDDDDLLRRDRUUDDDRRULRUDUUDRULLDLLLDDRDDUURLUUURUDRUDURLRUUUULUUURDRRRULDUULDLDDDRDDDDLLDRUDRDURLDDURDURULDDRLLRRLDUDRDURRLDRDLLULUUUD"
  (cons "LDDLRLRDDRLRUDDRDDUDRULUUULULDULRUULLRRDUULRDUUDDDRRULDDUDRLLLDULURDLDDRLLRURULULDLDULRDLDLRULUDLLDRUDLDURRDULDDRLRURDLLUDRDDDUDLUDULURULRDRLRULDLLRLDRRUDRDRUDRLDLRLUUURURRRLDDULLULLLRLRLULDLLRLDDRLDULURULRUURRUUURRUDRLRRURURDDDRULDULDLDLRRRLLDDRRURRULULULDRDULDRRULDUDRRLDULDRDURRDULLRRRLLLLRRLLRRRDRURDUULLURURURDDRRDRLLLULRRRDRLDRLDRDLLRUUDURRDRRDLLUDLDRLRLDLUDRDULRULRRLLRDLULDRLUDUUULLDRULDDLLRDUUUDRUUUUULUURDDLLDUURURRURLLURRDDUDUDRUUDDRDDRRLRLULRLRRRDRLLRRLLLDUULLUUDDLULLLDURRLLDRLDRDRLRRLRRULRRRRLRRRRRURUDULUULRDLLDRLRRDUURDRRUDRURRRDDRLDDLRLUDRDRDRRLDDDRDDRRRDUDULRURRDRDLLDRUD"
  (cons "UUUDLDDLRDLLLLRUUURDDLLURRUUURLUULLURUUDUDLDULULLRRRRLLLRDLLUDRUURDRURUDRURRLRLDRURLUDRLULRRURDDDURLLDULDLRRRDUUDDDRDLRUURRDRDRLRDLULRLDDRULRULDRDUDRUURLDLUDDULLLRURRLURLULDRRLUUURURLDLDDULLLRUUURDDDUURULULLUUUDUDRLLRRULUULDDDLLUDLURLLLRRULLURDRLUUDDLLDLLLUDULLRDRRRURDRUDUDUULUDURDLRUDLLRDDRURUDURLRULURDDURULLRDDRLRRDRLLULRDDDULRDLRULDDLRRDULDLUURRURUULRRDUURUDRRRRRLDULDLRURRULULDLRDDDRLLDURRULDUDUDRRRLUULRLUDURRRLRLDURRRRUULDRLUDDDUDURLURUDLLUDRDDDRLLURLRLDDURUUDDDUDUR"
  (cons "RURRRRURUDDRLURUDULRDUDDDUURULDRRRRURDLDRRLLDLUDLRRLRRUULLURULLRDLLRDDDDULLRLLDDLLRUDDULDUDLDURLRUULDDURURDURDLDRRULRURRRRRLRRLLUDURRURULRLRDLRLRRRLLURURDLLLDLDDULDLUDDLLLRUDDRDRLRUDRRLDDLRDLRLRLRLRRDUUURRUDRRLDLRRUULULLUDRRRUDLURDRUULDRDRRLUULULDDLURRLDULLURLDRLDULDRLLDLUUULLULRRDDRURRURLDLDRRLLLLLUDUURUULURLRDDDLRRRRLLLURUDLDDRDDRRUDURUULDRRULLLRRLRULLLRLDDLLRRLRURLRDRUDULLDDLDDDDDLDURURDLULRDDLRDLLRURLLRDLRUDDRDRRDURDURLUDRLDUDDDRRURRLUULURULLRLRDLRRLRURULLDDURLLRRRUDDRDLULURRRUUUULUULRRLLDLRUUURLLURLUURRLRL"
  (empty)))))))


(def start (Posn 1 1))
(deref start) ; you start at the 5

(def (move* p s)
  (match s
    ["" p]
    [ss (move* (move p (string.slice s 0 1)) (string.slice* s 1))]))


(def pos0 (move* start (list-ref input 0 #f)))
(def pos1 (move* pos0  (list-ref input 1 #f)))
(def pos2 (move* pos1  (list-ref input 2 #f)))
(def pos3 (move* pos2  (list-ref input 3 #f)))
(def pos4 (move* pos3  (list-ref input 4 #f)))

(deref pos0)
(deref pos1)
(deref pos2)
(deref pos3)
(deref pos4)




